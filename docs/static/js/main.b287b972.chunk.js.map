{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","values","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qPAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAaP,GAAb,mBAA4BO,OAC1CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAEmCC,UAAUH,GAF7C,6BACJ,oCADI,SAGWI,MAAMF,GAHjB,8BAGuBG,OAHvB,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAChC,MAAO,CACHF,KACAC,QACAR,IAAG,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBV,QARnB,kBAWZK,GAXY,4CAAH,sDCGPM,EAAc,SAAC,GAAoB,IAAlBX,EAAiB,EAAjBA,IAAKQ,EAAY,EAAZA,MAC/B,OACI,sBAAKI,UAAU,6CAAf,UACI,qBAAKC,IAAKb,EAAKc,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAQtB,ECXwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BoB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNtB,EAAQC,GAAUsB,MAAK,SAACC,GACpBH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGlB,CAAClB,IAEGmB,EDJwBK,CAAaxB,GAAhCW,EAAZ,EAAOL,KAAaY,EAApB,EAAoBA,QACpB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAkDd,IACjDkB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,8BAAf,SACKH,EAAOH,KAAI,SAACiB,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEF3BiB,G,MAbM,WAEjB,MAAoCxC,mBAAS,CAAC,iBAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KACA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC3B0C,EAAWnB,KAAI,SAACR,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,W,MCR9B4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b287b972.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './AddCategory.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('') // useState() is undefined! first state of inputvalue\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories((values) => [inputValue, ...values])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n//CHECK LATER!!!!!!!\r\n// inputValue.trim().length > 2\r\n//     ? ( setCategories((values) => [...values, inputValue]),\r\n//       setInputValue(''))\r\n//     : false\r\n","export const getGifs = async (category) => {\r\n    const apikey = 'weh46AZ7ZbcImJTNSBKGlUy7pSFgRtM3'\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apikey}`\r\n    const { data } = await (await fetch(url)).json()\r\n    const gifs = data.map(({ id, title, images }) => {\r\n        return {\r\n            id,\r\n            title,\r\n            url: images?.downsized_medium.url,\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const GifGridItem = ({ url, title }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__backInLeft\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    url: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    // const [images, setImages] = useState([])\r\n    // useEffect(() => {\r\n    //     getGifs(category).then(setImages);\r\n    //     // other \r\n    //     // getGifs(category).then((imgs) => setImages(imgs))\r\n        \r\n    // }, [])\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__jello'>{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid animate__animated\">\r\n                {images.map((img) => (\r\n                    <GifGridItem key={img.id} {...img} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then((imgs) => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            })\r\n        })\r\n    }, [category])\r\n\r\n    return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\nimport './GifExpertApp.css'\r\n\r\nconst GifExpertApp = () => {\r\n    // 'Kimetsu No Yaiba', 'Boku No Hero', 'Black Clover'\r\n    const [categories, setCategories] = useState(['Boku No Hero'])\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            {categories.map((category) => (\r\n                <GifGrid key={category} category={category} />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}